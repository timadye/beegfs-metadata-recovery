#!/usr/bin/env python3

import sys, argparse, re
from collections import defaultdict
from pathlib import Path

args = None


def parse_args():
    global args
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("-q", "--quiet", action="store_true")
    parser.add_argument("-f", "--list-files", action="store_true")
    parser.add_argument("-d", "--list-directories", action="store_true")
    parser.add_argument("-c", "--list-chunks", action="store_true")
    parser.add_argument("-e", "--empty-directories", action="store_true")
    parser.add_argument("-m", "--missing-chunks", action="store_true")
    parser.add_argument("-t", "--tags", action="store_true")
    parser.add_argument("-n", "--max-files", type=int)
    parser.add_argument("-u", "--user", default="")
    parser.add_argument("dir", nargs="?", default=".")
    args = parser.parse_args()


def err(*fargs, **fkwargs):
    if args.quiet:
        return
    print(*fargs, file=sys.stderr, **fkwargs)


def info(*fargs, **fkwargs):
    if not args.verbose:
        return
    print(*fargs, file=sys.stderr, **fkwargs)


def lsdirs(index):
    def lsdir(tag, pre, depth=0):
        subs = tags.get(tag)
        if subs is None:
            return [[pre, tag]]
        if pre != "":
            pre += "/"
        if depth > 100:
            err("directory too deep:", pre)
            return [[pre + "...", tag]]
        else:
            dirs = []
            for t, f in subs:
                dirs += lsdir(t, pre + f)
            return dirs

    tags = defaultdict(list)
    toptags = {}
    with open(index, encoding="latin-1") as f:
        n = 0
        lines = []
        joined = None
        for l in f:
            n += 1
            line = l.rstrip("\n")
            if line == "" or " " in line:
                if joined is not None:
                    err(joined)
                    joined = None
                if line != "":
                    lines.append(line)
            elif re.match(
                r"mercury\d+/meta(/buddymir)?/dentries/[0-9A-f]+/[0-9A-f]+/([0-9A-f]+-[0-9A-f]+-[0-9A-f]+|root)/\S+$",
                line,
            ):
                lines.append(f":{n} " + line)
                if joined is not None:
                    err(joined)
                joined = f"{index}:{n}: missing tag: " + line
            else:
                if joined is None:
                    joined = f"{index}:{n}: lines joined: " + lines[-1]
                joined += f"\n    {line}"
                lines[-1] += " " + line
        if joined is not None:
            err(joined)

        for line in lines:
            tag, ent = line.split(" ", 1)
            stag, sdir = ent.split("/")[-2:]
            tags[stag].append([tag, sdir])
            if stag == "root" and (args.user == "" or sdir == args.user):
                toptags[tag] = sdir
    dirs = []
    for toptag, user in toptags.items():
        dirs += lsdir(toptag, user)
    return dirs


def lsfiles(index, dirs):
    dtag = defaultdict(list)
    dlen = {}
    for dt in dirs:
        dlen[dt[1]] = 0
        dtag[dt[1]].append(dt)
    for t, dt in dtag.items():
        if len(dt) != 1:
            err("tag {t} has multiple dirs:", " ".join([d[0] for d in dt]))

    chunks = defaultdict(list)
    max_files = args.max_files
    if max_files is None:
        max_files = -1

    files = []
    with open(index, encoding="latin-1") as f:
        n = 0
        for l in f:
            n += 1
            if max_files >= 0 and n > max_files:
                break
            w = l.rstrip("\n").split(" ", 1)
            if len(w) != 2:
                err(f"{index}:{n}: bad format:", line)
                continue
            tag, ent = w
            ftag, fname = ent.split("/")[-2:]
            if ftag == "#fSiDs#":
                chunks[tag].append(fname)
            else:
                dt = dtag.get(ftag)
                if dt is not None:
                    dlen[ftag] += 1
                    files.append([dt, fname, tag, chunks.setdefault(tag, []), False])

    if args.empty_directories:
        for t, n in dlen.items():
            if n != 0:
                continue
            dt = dtag.get(t)
            files.append([dt, "", t, [], True])
            for d, _ in dt:
                info("empty dir:", d)

    return files


def lschunks(index, files):
    ctags = defaultdict(list)
    for ff in files:
        for c in ff[3]:
            ctags[c].append([ff, [[]] * len(ff[3])])
    for t, ffc in ctags.items():
        if len(ffc) > 1 or len(ffc[0][0][0]) > 1:
            err(
                "chunk {t} used in multiple files:",
                " ".join([d + "/" + ffc[0][1] for ffc in ffcl for d, _ in ffc[0][0]]),
            )

    chunks = []
    with open(index, encoding="latin-1") as f:
        n = 0
        for l in f:
            n += 1
            chunk = l.rstrip("\n")
            ctag = chunk.split("/")[-1]
            ffc = ctags.get(ctag)
            if ffc is not None:
                n = 0
                for ff, cc in ffc:
                    n += sum([len(c) for c in cc])
                    cc[ff[3].index(ctag)].append(chunk)
                if n == 0:
                    chunks.append(ffc)

    for t, ffc in ctags.items():
        n = 0
        for ff, cc in ffc:
            dt, f, t, ctag, e = ff
            for d, t in dt:
                for ic, c in enumerate(cc):
                    if len(c) == 0:
                        err(f"{d}/{f} chunk {ctag[ic]} not found")
                    elif len(c) > 1:
                        info(f"{d}/{f} chunk {ctag[ic]} multiple copies:", " ".join(c))
                    n += len(c)
        if n == 0 and args.missing_chunks:
            chunks.append(ffc)

    return chunks


def process():
    parse_args()
    idir = Path(args.dir)
    dirs = lsdirs(idir / "dir-metadata-index.txt")

    if args.list_directories:
        for d, t in dirs:
            if args.tags:
                print(d + "\t" + t)
            else:
                print(d)

    if args.list_files:
        files = lsfiles(idir / "file-metadata-index.txt", dirs)
        for dt, f, t, c, e in files:
            for d, _ in dt:
                if args.tags:
                    print(d + "/" + f + "\t" + t)
                else:
                    print(d + "/" + f)

    if args.list_chunks:
        files = lsfiles(idir / "file-metadata-index.txt", dirs)
        chunks = lschunks(idir / "storage-chunk-index.txt", files)
        for ffc in chunks:
            for ff, cc in ffc:
                dt, f, t, c, e = ff
                for d, _ in dt:
                    if args.tags:
                        print(
                            d
                            + "/"
                            + f
                            + "\t"
                            + " ".join(c)
                            + "\t"
                            + " ".join(
                                [
                                    str(idir / chunk[0]) if len(chunk) > 0 else "-"
                                    for chunk in cc
                                ]
                                if sum([len(chunk) for chunk in cc]) > 0
                                else []
                            )
                        )
                    else:
                        print(
                            d
                            + "/"
                            + f
                            + "\t"
                            + " ".join(
                                [
                                    str(idir / chunk[0]) if len(chunk) > 0 else "-"
                                    for chunk in cc
                                ]
                                if sum([len(chunk) for chunk in cc]) > 0
                                else []
                            )
                        )


exit(process())
